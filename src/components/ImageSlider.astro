---
import { Image } from 'astro:assets';

interface Props {
    images: Array<{
        src: any;
        alt: string;
    }>;
    class?: string;
}

const { images, class: className = '' } = Astro.props;
const sliderId = `slider-${Math.random().toString(36).substr(2, 9)}`;
---

<div class={`relative w-full h-auto overflow-hidden rounded-lg ${className}`}>
    <!-- Slider container -->
    <div id={sliderId} class="flex transition-transform duration-300 ease-in-out">
        {images.map((image) => (
            <Image src={image.src} alt={image.alt} class="w-full h-auto flex-shrink-0" />
        ))}
    </div>
    
    <!-- Navigation buttons -->
    <button class="prev-btn absolute left-2 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white rounded-full w-10 h-10 flex items-center justify-center transition-colors">
        ←
    </button>
    <button class="next-btn absolute right-2 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white rounded-full w-10 h-10 flex items-center justify-center transition-colors">
        →
    </button>
    
    <!-- Dots indicator -->
    <div class="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2">
        {images.map((_, index) => (
            <button class="dot w-2 h-2 rounded-full bg-white/50 hover:bg-white/80 transition-colors" data-slide={index}></button>
        ))}
    </div>
</div>

<script define:vars={{ sliderId, totalSlides: images.length }}>
    const slider = document.getElementById(sliderId);
    const prevBtn = slider.parentElement.querySelector('.prev-btn');
    const nextBtn = slider.parentElement.querySelector('.next-btn');
    const dots = slider.parentElement.querySelectorAll('.dot');
    
    let currentSlide = 0;
    
    function goToSlide(index) {
        currentSlide = index;
        slider.style.transform = `translateX(-${currentSlide * 100}%)`;
        
        // Update dots
        dots.forEach((dot, i) => {
            dot.classList.toggle('bg-white', i === currentSlide);
            dot.classList.toggle('bg-white/50', i !== currentSlide);
        });
    }
    
    prevBtn.addEventListener('click', () => {
        currentSlide = currentSlide > 0 ? currentSlide - 1 : totalSlides - 1;
        goToSlide(currentSlide);
    });
    
    nextBtn.addEventListener('click', () => {
        currentSlide = currentSlide < totalSlides - 1 ? currentSlide + 1 : 0;
        goToSlide(currentSlide);
    });
    
    dots.forEach((dot, index) => {
        dot.addEventListener('click', () => goToSlide(index));
    });
    
    // Initialize first dot as active
    goToSlide(0);
</script> 